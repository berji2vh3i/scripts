$('#gameContainer').html('<div id="chart" style="height: 320px;"></div>');
$('#gameContainer').css('width', '1000px');
$('#gameContainer').css('height', '350px');
$('#gameContainer').css('margin', 'auto');
alert('BOT has applied!');
randomizeSeed();
console.clear();
var run = false;
basebetAmount = 0;
betAmount = 0;
balance = 0;
overBalance = 0;
underBalance = 0;
prediction = 0;
direction = '';
bet = 0;
wagered = 0;
profit = 0;
profitWagered = 0;
startTime = new Date();
onTime = 0;
playTime = 0;
playDay = 0;
playHour = 0;
playMinute = 0;
playSecond = 0;
speed = 0;
loseStreak = 0;
maxLoseStreak = 0;
dsp = [];
chart = '';
color = '';
$.getScript('https://canvasjs.com/assets/script/canvasjs.min.js').done(function (script, textStatus) {
	dps = [{
			x: 0,
			y: 0
		}
	];
	chart = new CanvasJS.Chart('chart', {
			theme: 'light2',
			zoomEnabled: true,
			axisX: {
				title: 'bet',
				includeZero: false,
			},
			axisY: {
				title: 'profit',
				includeZero: false,
			},
			title: {
				text: ' ',
				fontColor: '#6d49d8',
				fontSize: 2e1,
				padding: 2e1
			},
			data: [{
					type: 'stepLine',
					dataPoints: dps
				}
			]
		});
	chart.render();
});
function updateChart(bet, profit, color) {
	dps.push({
		x: bet,
		y: profit,
		color: color
	});
	if (dps[dps.length - 2]) {
		dps[dps.length - 2].lineColor = color;
	}
	if (dps.length > 1e3) {
		dps.shift();
	}
	chart.render();
}
function start() {
	run = true;
	basebetAmount = prompt('bet = ', '0.00000000');
	overBalance = prompt('overBalance = ', '0.00000000');
	underBalance = prompt('underBalance = ', '0.00000000');
	betAmount = basebetAmount;
	prediction = 5;
	direction = 'under';
	doBet();
}
function stop() {
	run = false;
}
function reset() {
	run = false;
	basebetAmount = 0;
	betAmount = 0;
	balance = 0;
	overBalance = 0;
	underBalance = 0;
	prediction = 0;
	direction = '';
	bet = 0;
	wagered = 0;
	profit = 0;
	profitWagered = 0;
	startTime = new Date();
	onTime = 0;
	playTime = 0;
	playDay = 0;
	playHour = 0;
	playMinute = 0;
	playSecond = 0;
	speed = 0;
	loseStreak = 0;
	maxLoseStreak = 0;
	dsp = [];
	chart = '';
	color = '';
	$.getScript('https://canvasjs.com/assets/script/canvasjs.min.js').done(function (script, textStatus) {
		dps = [{
				x: 0,
				y: 0
			}
		];
		chart = new CanvasJS.Chart('chart', {
				theme: 'light2',
				zoomEnabled: true,
				axisX: {
					title: 'bet',
					includeZero: false,
				},
				axisY: {
					title: 'profit',
					includeZero: false,
				},
				title: {
					text: ' ',
					fontColor: '#6d49d8',
					fontSize: 2e1,
					padding: 2e1
				},
				data: [{
						type: 'stepLine',
						dataPoints: dps
					}
				]
			});
		chart.render();
	});
}
function doBet() {
	if (run === true) {
		jQuery.ajax({
			url: "https://" + user.domain + "/play/",
			type: "POST",
			dataType: "html",
			timeout: 6e4,
			data: {
				game: "dice",
				coin: $('#coin').val(),
				session: getCookie('SESSION'),
				betAmount: betAmount,
				prediction: prediction,
				direction: direction,
				clientSeed: $('#clientSeed').val(),
				serverSeedHash: $('#serverSeedHash').html(),
				action: "playBet",
				hash: user.hash
			},
			success: function (data) {
				var data = JSON.parse(data);
				if (data.result === true) {
					bet++;
					onTime = new Date().getTime();
					playTime = onTime - startTime;
					playDay = Math.floor(playTime / (1e3 * 6e1 * 6e1 * 24));
					playHour = Math.floor((playTime % (1e3 * 6e1 * 6e1 * 24)) / (1e3 * 6e1 * 6e1));
					playMinute = Math.floor((playTime % (1e3 * 6e1 * 6e1)) / (1e3 * 6e1));
					playSecond = Math.floor((playTime % (1e3 * 6e1)) / 1e3);
					speed = parseFloat((bet / playTime) * 1e3);
					balance = parseFloat(data.balance);
					wagered += parseFloat(betAmount);
					profit += parseFloat(data.profit);
					previous_betAmount = betAmount;
					profitWagered = (wagered * 0.1) / 1e2;
					if (data.gameResult === 'win') {
						color = '#2eab5b';
						loseStreak = 0;
					} else {
						color = '#ab2e40';
						loseStreak++;
					}
					if (loseStreak >= maxLoseStreak) {
						maxLoseStreak = loseStreak;
					}
					$('#serverSeedHash').html(data.serverSeedHash);
					console.clear();
					console.log('BOT Casino Game by Mai Hoang Quoc Bao');
					console.log('loseStreak = ' + loseStreak);
					console.log('maxLoseStreak = ' + maxLoseStreak);
					console.log('game = dice');
					console.log('coin = ' + $('#coin').val());
					console.log('time = ' + playDay + ':' + playHour + ':' + playMinute + ':' + playSecond);
					console.log('speed = ' + speed.toFixed(2));
					console.log('balance = ' + balance.toFixed(8));
					console.log('profit = ' + profit.toFixed(8));
					console.log('wagered = ' + wagered.toFixed(8));
					console.log('profitWagered = ' + profitWagered.toFixed(8));
					updateChart(bet, profit, color);
					if (betAmount >= balance) {
						stop();
						alert('You lose!');
						return;
					} else {
						if (overBalance != 0 && balance >= overBalance) {
							stop();
							alert('Over balance!');
							return;
						} else if (underBalance != 0 && balance <= underBalance) {
							stop();
							alert('Under balance!');
							return;
						} else {
							if (loseStreak >= maxLoseStreak) {
								maxLoseStreak = loseStreak;
						
							}
							if (data.gameResult === 'win') {
								a = Math.floor(Math.random() * (99 - 1 + 1)) + 1;
								if ( a > 50) {
									betAmount = basebetAmount;
									prediction = 5;
									direction = 'under';
								} else {
									betAmount = basebetAmount;
									prediction = 95;
									direction = 'over';
								}
							} else {
								
								if (loseStreak < 8) {
									betAmount *= 1.111;
								}
								if (loseStreak === 8) {
									direction = 'under';
									betAmount = previous_betAmount * 9;
									prediction = 49;
								}
								if (loseStreak === 9) {
									betAmount = previous_betAmount * 0.3;
									prediction = 10;
								}
								if (loseStreak === 10 && loseStreak < 15) {
									betAmount = previous_betAmount * 1.3;
									prediction = 10;
								}
								if (loseStreak === 15) {
									betAmount = previous_betAmount * 6;
									prediction = 49;
								}
								if (loseStreak === 16) {
									betAmount = previous_betAmount * 6;
									prediction = 25;
								}
								if (loseStreak === 17 && loseStreak < 22) {
									betAmount = previous_betAmount * 1.5;
									prediction = 25;
								}
								if (loseStreak === 22) {
									betAmount = previous_betAmount * 3.5;
									prediction = 49;
								}
								if (loseStreak === 23) {
									betAmount = previous_betAmount * 2.1;
									prediction = 49;
								} 
								if (loseStreak === 24) {
									betAmount = previous_betAmount * 2.1;
									prediction = 10;
								} 
								if (loseStreak === 25) {
									betAmount = previous_betAmount * 1;
									prediction = 10;
								} 
								if (loseStreak === 26) {
									betAmount = previous_betAmount * 1;
									prediction = 5;
								}
								if (loseStreak === 27) {
									betAmount = previous_betAmount * 1;
									prediction = 5;
								}
								if (loseStreak === 28) {
									betAmount = previous_betAmount * 5;
									prediction = 49;
								}
								if (loseStreak === 29) {
									betAmount = previous_betAmount * 1;
									prediction = 30;
								}
								if (loseStreak === 30) {
									betAmount = previous_betAmount * 1.3;
									prediction = 25;
								}
								if (loseStreak === 31) {
									betAmount = previous_betAmount * 3.5;
									prediction = 49;
								}
								if (loseStreak === 32) {
									betAmount = previous_betAmount * 1;
									prediction = 25;
								}
								if (loseStreak === 33) {
									betAmount = previous_betAmount * 1;
									prediction = 10;
								}
								if (loseStreak === 34) {
									betAmount = previous_betAmount * 1;
									prediction = 5;
								}
								if (loseStreak === 35) {
									betAmount = previous_betAmount * 1.3;
									prediction = 5;
								}
								if (loseStreak === 36) {
									betAmount = previous_betAmount * 4;
									prediction = 49;
								}
								if (loseStreak === 37) {
									betAmount = previous_betAmount * 1;
									prediction = 30;
								}
								if (loseStreak === 38) {
									betAmount = previous_betAmount * 1;
									prediction = 15;
								}
								if (loseStreak === 39) {
									betAmount = previous_betAmount * 1;
									prediction = 5;
								}
								if (loseStreak === 40) {
									betAmount = previous_betAmount * 2;
									prediction = 25;
								}
								if (loseStreak === 41) {
									betAmount = previous_betAmount * 2.5;
									prediction = 49;
								}
								if (loseStreak === 42) {
									betAmount = previous_betAmount * 1;
									prediction = 30;
								}
								if (loseStreak === 43) {
									betAmount = previous_betAmount * 1;
									prediction = 10;
								}
								if (loseStreak === 44) {
									betAmount = previous_betAmount * 1;
									prediction = 5;
								}
								if (loseStreak === 45) {
									betAmount = previous_betAmount * 4;
									prediction = 49;
								}
								if (loseStreak === 46) {
									betAmount = previous_betAmount * 1;
									prediction = 30;
								}
								if (loseStreak === 47) {
									betAmount = previous_betAmount * 3;
									prediction = 49;
								}
								if (loseStreak === 48) {
									betAmount = previous_betAmount * 1;
									prediction = 25;
								}
								if (loseStreak > 48) {
									betAmount = previous_betAmount * 1.12;
									prediction = 5;
								}
								
							}
						}
					}
					doBet();
				} else {
					randomizeSeed();
					setInterval(doBet(), 1e3);
				}
			},
			error: function (xhr, ajaxOptions, throwagerednError) {
				randomizeSeed();
				setInterval(doBet(), 1e3);
			},
			timeout: function (xhr, ajaxOptions, throwagerednError) {
				randomizeSeed();
				setInterval(doBet(), 1e3);
			},
			abetort: function (xhr, ajaxOptions, throwagerednError) {
				randomizeSeed();
				setInterval(doBet(), 1e3);
			}
		});
	} else {
		alert('BOT has stopped!');
		return;
	}
}
start();